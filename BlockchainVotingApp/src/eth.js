import { Promise } from "q";

var BlockPoll = {
    abi: [{ "constant": true, "inputs": [{ "name": "_index", "type": "uint256" }], "name": "getPollItemFromPoll", "outputs": [{ "name": "", "type": "string" }, { "name": "", "type": "uint8" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getPollData", "outputs": [{ "name": "pollName", "type": "string" }, { "name": "creator", "type": "address" }, { "name": "active", "type": "bool" }, { "name": "close", "type": "bool" }, { "name": "totalVotes", "type": "uint256" }, { "name": "alreadyVoted", "type": "bool" }, { "name": "creationDate", "type": "uint256" }, { "name": "finishDate", "type": "uint256" }, { "name": "items", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "setActive", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_namePollItem", "type": "string" }], "name": "addPollItem", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "closePoll", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_pollItemToVote", "type": "string" }], "name": "vote", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_name", "type": "string" }, { "name": "_endDate", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }],
    contractInstance: undefined,
    deployContract: function (_name, _endDate) {
        var votingContract = window.web3.eth.contract(this.abi);
        votingContract.new(
            _name,
            _endDate,
            {
                from: window.web3.eth.accounts[0],
                data: '',
                gas: '4700000'
            }, function (e, contract) {
                if (typeof contract.address !== 'undefined') {
                    window.instanceVue.contractDeployed(contract);
                }
            });
    },
    async getContract(contractAddress) {
        var contract = window.web3.eth.contract(this.abi);
        return await contract.at(contractAddress);
    },
    async addPollItem(contract, pollItemName) {
        return await new Promise(function (resolve, reject) {
            contract.addPollItem.sendTransaction(pollItemName, function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async getPollData(contract) {
        return await new Promise(function (resolve, reject) {
            contract.getPollData(function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async getPollItemFromPoll(contract, index) {
        return await new Promise(function (resolve, reject) {
            contract.getPollItemFromPoll(index, function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async vote(contract, name) {
        return await new Promise(function (resolve, reject) {
            contract.vote(name, function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async setActive(contract) {
        return await new Promise(function (resolve, reject) {
            contract.setActive(function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async closePoll(contract) {
        return await new Promise(function (resolve, reject) {
            contract.closePoll(function (error, result) {
                if (!error) {
                    resolve(result);
                }
                else {
                    reject(error);
                }
            });
        });
    },
    async getTransactionReceiptMined(txHash) {
        return await new Promise(function (resolve, reject) {
            var receiptFunc = function () {
                window.web3.eth.getTransactionReceipt(txHash, function (err, res) {
                    if (res == null) {
                        setTimeout(function () { receiptFunc(); }, 500);
                    } else if (res != null) {
                        resolve(res);
                    } else if (!err) {
                        reject(err);
                    }
                });
            }
            setTimeout(function () { receiptFunc(); }, 500);
        });
    },
    async parsePollData(contract, data) {
        return await new Promise(function (resolve, reject) {
            var pollData = {
                pollName: data[0],
                creator: data[1],
                active: data[2],
                close: data[3],
                totalVotes: parseInt(data[4].toString()),
                alreadyVoted: data[5],
                creationDate: new Date(parseInt(data[6].toString()) * 1000),
                finishDate: new Date(parseInt(data[7].toString())),
                pollItems: []
            };

            var nbPollItems = parseInt(data[8].toString());
            for (var i = 0; i < nbPollItems; i++) {
                BlockPoll.getPollItemFromPoll(contract, i).then(function (result) {
                    var pollItem = BlockPoll.parsePollItem(result);
                    pollData.pollItems.push(pollItem);
                }).catch(function (error) {
                    // eslint-disable-next-line
                    reject(error);
                });
            }
            resolve(pollData);
        });
    },
    parsePollItem(data, i) {
        return {
            name: data[0],
            votes: parseInt(data[1].toString())
        };
    },
    checkIfWeb3IsInWindow() {
        return typeof window.web3 !== 'undefined' ? true : false;
    }
};

export default BlockPoll;